from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import logging
import os
import asyncio
from dotenv import load_dotenv
import tmdbsimple as tmdb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def search_movies(query: str) -> list:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    try:
        search = tmdb.Search()
        response = await asyncio.to_thread(search.multi, query=query, language='ru')
        
        if not response or 'results' not in response:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
        results = [
            item for item in response.get('results', [])
            if item.get('media_type') in ('movie', 'tv')
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: float(x.get('popularity', 0)), reverse=True)
        
        return results[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    except Exception as e:
        logger.error(f"Error searching movies: {e}")
        return []

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    query = update.message.text.strip()
    logger.info(f'Received text: {query}')
    
    results = await search_movies(query)
    
    if not results:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
            ]])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    keyboard = []
    for item in results:
        title = item.get('title', item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        year = item.get('release_date', item.get('first_air_date', ''))[:4]
        media_type = 'üé¨' if item['media_type'] == 'movie' else 'üì∫'
        
        keyboard.append([InlineKeyboardButton(
            f"{media_type} {title} ({year})",
            callback_data=f"details_{item['id']}_{item['media_type']}"
        )])
    
    keyboard.append([InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    
    await update.message.reply_text(
        f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info('User triggered /start command')
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='search_by_name'),
            InlineKeyboardButton("üéØ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data='search_by_filter')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
    
    await update.message.reply_text(text, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    logger.info(f'Button pressed: {query.data}')
    
    if query.data == 'search_by_name':
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')
            ]])
        )
    
    elif query.data == 'search_by_filter':
        keyboard = [
            [
                InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data='filter_movies'),
                InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª—ã", callback_data='filter_series')
            ],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif query.data == 'back_to_main':
        keyboard = [
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data='search_by_name'),
                InlineKeyboardButton("üéØ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data='search_by_filter')
            ]
        ]
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f'Received text: {update.message.text}')
    await update.message.reply_text(
        text="–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —è –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')
        ]])
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    tmdb.API_KEY = os.getenv("TMDB_API_KEY")
    
    if not token or not tmdb.API_KEY:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot started")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
