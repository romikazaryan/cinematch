k_data="genre_35")
            ],
            [
                InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="genre_18"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_878")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_genre")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_type")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(genre_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
        return CHOOSE_GENRE
    
    return CHOOSE_TYPE

async def choose_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_type":
        keyboard = [
            [
                InlineKeyboardButton("–§–∏–ª—å–º", callback_data='type_movie'),
                InlineKeyboardButton("–°–µ—Ä–∏–∞–ª", callback_data='type_series')
            ],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:', reply_markup=reply_markup)
        return CHOOSE_TYPE
    
    if query.data.startswith("genre_") or query.data == "skip_genre":
        if query.data.startswith("genre_"):
            context.user_data['filter_genre'] = query.data.split('_')[1]
        else:
            context.user_data['filter_genre'] = None
        
        keyboard = [
            [
                InlineKeyboardButton("2020-2023", callback_data="year_2020-2023"),
                InlineKeyboardButton("2010-2019", callback_data="year_2010-2019")
            ],
            [
                InlineKeyboardButton("2000-2009", callback_data="year_2000-2009"),
                InlineKeyboardButton("–î–æ 2000", callback_data="year_pre2000")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_year")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_genre")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=reply_markup)
        return CHOOSE_YEAR
    
    return CHOOSE_GENRE

async def choose_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –≥–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_genre":
        genre_keyboard = [
            [
                InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="genre_28"),
                InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="genre_35")
            ],
            [
                InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="genre_18"),
                InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_878")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_genre")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_type")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(genre_keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
        return CHOOSE_GENRE
    
    if query.data.startswith("year_") or query.data == "skip_year":
        if query.data.startswith("year_"):
            context.user_data['filter_year'] = query.data.split('_')[1]
        else:
            context.user_data['filter_year'] = None
        
        keyboard = [
            [
                InlineKeyboardButton("–ë–æ–ª–µ–µ 8", callback_data="rating_high"),
                InlineKeyboardButton("–û—Ç 5 –¥–æ 8", callback_data="rating_medium"),
                InlineKeyboardButton("–ú–µ–Ω—å—à–µ 5", callback_data="rating_low")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_rating")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_year")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
        return CHOOSE_RATING
    
    return CHOOSE_YEAR

async def choose_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_year":
        keyboard = [
            [
                InlineKeyboardButton("2020-2023", callback_data="year_2020-2023"),
                InlineKeyboardButton("2010-2019", callback_data="year_2010-2019")
            ],
            [
                InlineKeyboardButton("2000-2009", callback_data="year_2000-2009"),
                InlineKeyboardButton("–î–æ 2000", callback_data="year_pre2000")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_year")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_genre")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=reply_markup)
        return CHOOSE_YEAR
    
    if query.data.startswith("rating_") or query.data == "skip_rating":
        if query.data.startswith("rating_"):
            context.user_data['filter_rating'] = query.data.split('_')[1]
        else:
            context.user_data['filter_rating'] = None
        
        main_countries = [
            '–°–®–ê', '–†–æ—Å—Å–∏—è', 
            '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è',
            '–ì–µ—Ä–º–∞–Ω–∏—è', '–Ø–ø–æ–Ω–∏—è',
            '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', '–ö–∏—Ç–∞–π',
            '–ò—Ç–∞–ª–∏—è', '–ò—Å–ø–∞–Ω–∏—è',
            '–ö–∞–Ω–∞–¥–∞', '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
            '–ò–Ω–¥–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è',
            '–ú–µ–∫—Å–∏–∫–∞'
        ]
        
        country_buttons = []
        for i in range(0, len(main_countries), 2):
            row = []
            row.append(InlineKeyboardButton(main_countries[i], callback_data=f"country_{main_countries[i]}"))
            
            if i + 1 < len(main_countries):
                row.append(InlineKeyboardButton(main_countries[i+1], callback_data=f"country_{main_countries[i+1]}"))
            
            country_buttons.append(row)
        
        keyboard = country_buttons + [
            [InlineKeyboardButton("–õ—é–±–∞—è", callback_data="skip_country")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_rating")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=reply_markup)
        return CHOOSE_COUNTRY
    
    return CHOOSE_RATING

async def choose_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_rating":
        keyboard = [
            [
                InlineKeyboardButton("–ë–æ–ª–µ–µ 8", callback_data="rating_high"),
                InlineKeyboardButton("–û—Ç 5 –¥–æ 8", callback_data="rating_medium"),
                InlineKeyboardButton("–ú–µ–Ω—å—à–µ 5", callback_data="rating_low")
            ],
            [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_rating")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_year")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
        return CHOOSE_RATING
    
    if query.data.startswith("country_") or query.data == "skip_country":
        if query.data.startswith("country_"):
            context.user_data['filter_country'] = query.data.split('_')[1]
        else:
            context.user_data['filter_country'] = None
        
        await perform_filtered_search(update, context)
        return ConversationHandler.END
    
    return CHOOSE_COUNTRY

async def perform_filtered_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è perform_filtered_search")
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_type = context.user_data.get('filter_type', 'movie')
    filter_genre = context.user_data.get('filter_genre')
    filter_year = context.user_data.get('filter_year')
    filter_rating = context.user_data.get('filter_rating')
    filter_country = context.user_data.get('filter_country')
    sort_by = context.user_data.get('sort_by', 'popularity.desc')

    current_date = datetime.now().strftime('%Y-%m-%d')
    current_year = datetime.now().year

    logger.info(f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    logger.info(f"–¢–∏–ø: {filter_type}")
    logger.info(f"–ñ–∞–Ω—Ä: {filter_genre}")
    logger.info(f"–ì–æ–¥: {filter_year}")
    logger.info(f"–†–µ–π—Ç–∏–Ω–≥: {filter_rating}")
    logger.info(f"–°—Ç—Ä–∞–Ω–∞: {filter_country}")
    logger.info(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_by}")
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    params = {
        'language': 'ru',
        'sort_by': sort_by,
        'include_adult': False,
        'with_origin_country': RU_COUNTRIES.get(filter_country, filter_country)
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
    if filter_genre:
        genre_id = filter_genre
        if filter_type == 'series':
            genre_id = '10759' if genre_id == '28' else genre_id
        params['with_genres'] = genre_id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞
    year_ranges = {
        '2020-2023': {'start': 2020, 'end': current_year},
        '2010-2019': {'start': 2010, 'end': 2019},
        '2000-2009': {'start': 2000, 'end': 2009},
        'pre2000': {'start': 1900, 'end': 1999}
    }

    if filter_year and filter_year != 'skip_year':
        year_range = year_ranges.get(filter_year, {})
        
        # –î–ª—è —Ñ–∏–ª—å–º–æ–≤
        if filter_type in ['movie', 'all']:
            params['release_date.gte'] = f'{year_range["start"]}-01-01'
            params['release_date.lte'] = f'{year_range["end"]}-12-31'
        
        # –î–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤
        if filter_type in ['series', 'all']:
            params['first_air_date.gte'] = f'{year_range["start"]}-01-01'
            params['first_air_date.lte'] = f'{year_range["end"]}-12-31'

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ 
    if filter_rating and filter_rating != 'skip_rating':
        rating_ranges = {
            'high': {'gte': 8.0},
            'medium': {'gte': 5.0, 'lte': 8.0},
            'low': {'lte': 5.0}
        }
        rating_range = rating_ranges.get(filter_rating, {})
        
        params['vote_average.gte'] = rating_range.get('gte', 0)
        if 'lte' in rating_range:
            params['vote_average.lte'] = rating_range['lte']

    try:
        results = []
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
        if filter_type == 'all':
            movie_params = params.copy()
            tv_params = params.copy()
            
            movie_response = await asyncio.to_thread(tmdb.Discover().movie, **movie_params)
            tv_response = await asyncio.to_thread(tmdb.Discover().tv, **tv_params)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ç–∏–ø–æ–º –º–µ–¥–∏–∞
            movie_results = movie_response.get('results', [])
            tv_results = tv_response.get('results', [])
            
            for movie in movie_results:
                movie['media_type'] = 'movie'
            for tv in tv_results:
                tv['media_type'] = 'tv'
            
            results = movie_results + tv_results
        else:
            # –ü–æ–∏—Å–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
            search_function = tmdb.Discover().tv if filter_type == 'series' else tmdb.Discover().movie
            media_type = 'tv' if filter_type == 'series' else 'movie'
            
            response = await asyncio.to_thread(search_function, **params)
            results = response.get('results', [])
            for item in results:
                item['media_type'] = media_type

        logger.info(f"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(results)}")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        filtered_results = []
        for item in results:
            release_date = item.get('release_date', item.get('first_air_date', ''))
            title = item.get('title', item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {title}, –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {release_date}")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—É—Å—Ç–æ–π –¥–∞—Ç–æ–π
            if not release_date:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ {title}: –ø—É—Å—Ç–∞—è –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞")
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±—É–¥—É—â–µ–π –¥–∞—Ç–æ–π
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
                release_date_str = str(release_date)[:10]
                
                if release_date_str > current_date:
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫ {title}: –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º {release_date_str}")
                    continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –¥–ª—è {title}: {e}")
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –≥–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if filter_year != 'skip_year':
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞
                    year_str = str(release_date)[:4]
                    year = int(year_str) if year_str.isdigit() else 0
                    
                    range_start, range_end = year_ranges.get(filter_year, (1900, current_year))
                    
                    if year < range_start or year > range_end:
                        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ {title}: –≥–æ–¥ {year} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {range_start}-{range_end}")
                        continue
                except (ValueError, TypeError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–¥–∞ –¥–ª—è {title}: {e}")
                    continue
            
            filtered_results.append(item)

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_results)}")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if sort_by == 'popularity.desc':
            filtered_results.sort(key=lambda x: float(x.get('popularity', 0)), reverse=True)
        elif sort_by == 'vote_average.desc':
            filtered_results.sort(key=lambda x: float(x.get('vote_average', 0)), reverse=True)
        elif sort_by == 'primary_release_date.desc':
            filtered_results.sort(
                key=lambda x: x.get('release_date', x.get('first_air_date', '1900-01-01')), 
                reverse=True
            )

        if not filtered_results:
            message = (
                "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º —É–∑–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
                "‚Ä¢ –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
            )
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_filter")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        filter_info = []
        if filter_type != 'all':
            filter_info.append(f"–¢–∏–ø: {'–°–µ—Ä–∏–∞–ª' if filter_type == 'series' else '–§–∏–ª—å–º'}")
        if filter_genre:
            genre_name = get_genre_name(filter_genre, media_type=filter_type)
            filter_info.append(f"–ñ–∞–Ω—Ä: {genre_name}")
        if filter_year:
            year_text = {
                '2020-2023': '2020-2023',
                '2010-2019': '2010-2019',
                '2000-2009': '2000-2009',
                'pre2000': '–î–æ 2000'
            }.get(filter_year)
            if year_text:
                filter_info.append(f"–ì–æ–¥: {year_text}")
        if filter_rating:
            rating_text = {
                'high': '–ë–æ–ª–µ–µ 8',
                'medium': '–û—Ç 5 –¥–æ 8',
                'low': '–ú–µ–Ω—å—à–µ 5'
            }.get(filter_rating)
            if rating_text:
                filter_info.append(f"–†–µ–π—Ç–∏–Ω–≥: {rating_text}")
        if filter_country:
            filter_info.append(f"–°—Ç—Ä–∞–Ω–∞: {filter_country}")
        
        sort_text = {
            'popularity.desc': '–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
            'vote_average.desc': '–ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
            'primary_release_date.desc': '–ø–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–∞'
        }.get(sort_by, '–ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏')
        filter_info.append(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_text}")

        filter_summary = " | ".join(filter_info)
        search_query = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\nüìã –§–∏–ª—å—Ç—Ä—ã: {filter_summary}"

        context.user_data['results'] = filtered_results
        context.user_data['query'] = search_query

        await send_results_page(update, context, filtered_results, 0, search_query)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        )
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_filter")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(error_message, reply_markup=reply_markup)

async def cancel_filter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.')
    return ConversationHandler.END


def main() -> None:
    logger.info("Bot started")
    application = Application.builder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$"))
    
    # ConversationHandler –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
CHOOSE_TYPE, CHOOSE_GENRE, CHOOSE_YEAR, CHOOSE_RATING, CHOOSE_COUNTRY, SHOW_RESULTS = range(6)

async def filter_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    keyboard = [
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
        [
            InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data='type_movie'),
            InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª", callback_data='type_series')
        ],
        [InlineKeyboardButton("üé¨üì∫ –í—Å–µ", callback_data='type_all')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:', 
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:', 
            reply_markup=reply_markup
        )
    
    return CHOOSE_TYPE

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose type called with data: {query.data}")
    
    try:
        if query.data == "back_to_main_menu":
            logger.info("Returning to main menu from type selection")
            return await back_to_main_menu(update, context)
        
        if query.data == "back_to_type":
            logger.info("Returning to type selection")
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("üé¨ –§–∏–ª—å–º", callback_data='type_movie'),
                    InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª", callback_data='type_series')
                ],
                [InlineKeyboardButton("üé¨üì∫ –í—Å–µ", callback_data='type_all')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_type")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:', reply_markup=reply_markup)
            return CHOOSE_TYPE
        
        if query.data.startswith("type_"):
            context.user_data['filter_type'] = query.data.split('_')[1]
            logger.info(f"Selected type: {context.user_data['filter_type']}")
            
            genre_keyboard = [
    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    [
        InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="genre_28"),
        InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="genre_35")
    ],
    [
        InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="genre_18"),
        InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_878")
    ],
    [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_genre")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_type")]
]
            reply_markup = InlineKeyboardMarkup(genre_keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
            return CHOOSE_GENRE
        
        logger.warning(f"Unhandled type selection: {query.data}")
        return CHOOSE_TYPE
    
    except Exception as e:
        logger.error(f"Error in choose_type: {e}")
        return CHOOSE_TYPE

async def choose_genre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose genre called with data: {query.data}")
    
    try:
        if query.data == "back_to_type":
            logger.info("Returning to type selection from genre")
            keyboard = [
                [
                    InlineKeyboardButton("–§–∏–ª—å–º", callback_data='type_movie'),
                    InlineKeyboardButton("–°–µ—Ä–∏–∞–ª", callback_data='type_series')
                ],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:', reply_markup=reply_markup)
            return CHOOSE_TYPE
        
        if query.data == "back_to_genre":
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="genre_28"),
                    InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="genre_35")
                ],
                [
                    InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="genre_18"),
                    InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_878")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_genre")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_type")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
            return CHOOSE_GENRE
        
        if query.data.startswith("genre_") or query.data == "skip_genre":
            if query.data.startswith("genre_"):
                context.user_data['filter_genre'] = query.data.split('_')[1]
                logger.info(f"Selected genre: {context.user_data['filter_genre']}")
            else:
                context.user_data['filter_genre'] = None
                logger.info("Genre skipped")
            
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("2020-2023", callback_data="year_2020-2023"),
                    InlineKeyboardButton("2010-2019", callback_data="year_2010-2019")
                ],
                [
                    InlineKeyboardButton("2000-2009", callback_data="year_2000-2009"),
                    InlineKeyboardButton("–î–æ 2000", callback_data="year_pre2000")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_year")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_genre")],              
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=reply_markup)
            return CHOOSE_YEAR
        
        logger.warning(f"Unhandled genre selection: {query.data}")
        return CHOOSE_GENRE
    
    except Exception as e:
        logger.error(f"Error in choose_genre: {e}")
        return CHOOSE_GENRE

async def choose_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –≥–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose year called with data: {query.data}")
    
    try:
        if query.data == "back_to_genre":
            logger.info("Returning to genre selection from year")
            genre_keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("–ë–æ–µ–≤–∏–∫", callback_data="genre_28"),
                    InlineKeyboardButton("–ö–æ–º–µ–¥–∏—è", callback_data="genre_35")
                ],
                [
                    InlineKeyboardButton("–î—Ä–∞–º–∞", callback_data="genre_18"),
                    InlineKeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_878")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_genre")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_type")]
            ]
            reply_markup = InlineKeyboardMarkup(genre_keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=reply_markup)
            return CHOOSE_GENRE
        
        if query.data == "back_to_year":
            keyboard = [
    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
    [
        InlineKeyboardButton("2020-2023", callback_data="year_2020-2023"),
        InlineKeyboardButton("2010-2019", callback_data="year_2010-2019")
    ],
    [
        InlineKeyboardButton("2000-2009", callback_data="year_2000-2009"),
        InlineKeyboardButton("–î–æ 2000", callback_data="year_pre2000")
    ],
    [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_year")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_genre")]
]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=reply_markup)
            return CHOOSE_YEAR
        
        if query.data.startswith("year_") or query.data == "skip_year":
            if query.data.startswith("year_"):
                context.user_data['filter_year'] = query.data.split('_')[1]
                logger.info(f"Selected year: {context.user_data['filter_year']}")
            else:
                context.user_data['filter_year'] = None
                logger.info("Year skipped")
            
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("–ë–æ–ª–µ–µ 8", callback_data="rating_high"),
                    InlineKeyboardButton("–û—Ç 5 –¥–æ 8", callback_data="rating_medium"),
                    InlineKeyboardButton("–ú–µ–Ω—å—à–µ 5", callback_data="rating_low")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_rating")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_year")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
            return CHOOSE_RATING
        
        logger.warning(f"Unhandled year selection: {query.data}")
        return CHOOSE_YEAR
    
    except Exception as e:
        logger.error(f"Error in choose_year: {e}")
        return CHOOSE_YEAR

async def choose_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose rating called with data: {query.data}")
    
    try:
        if query.data == "back_to_year":
            logger.info("Returning to year selection from rating")
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("2020-2023", callback_data="year_2020-2023"),
                    InlineKeyboardButton("2010-2019", callback_data="year_2010-2019")
                ],
                [
                    InlineKeyboardButton("2000-2009", callback_data="year_2000-2009"),
                    InlineKeyboardButton("–î–æ 2000", callback_data="year_pre2000")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_year")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_genre")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=reply_markup)
            return CHOOSE_YEAR
        
        if query.data == "back_to_rating":
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("–ë–æ–ª–µ–µ 8", callback_data="rating_high"),
                    InlineKeyboardButton("–û—Ç 5 –¥–æ 8", callback_data="rating_medium"),
                    InlineKeyboardButton("–ú–µ–Ω—å—à–µ 5", callback_data="rating_low")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_rating")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_year")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
            return CHOOSE_RATING
        
        if query.data.startswith("rating_") or query.data == "skip_rating":
            if query.data.startswith("rating_"):
                context.user_data['filter_rating'] = query.data.split('_')[1]
                logger.info(f"Selected rating: {context.user_data['filter_rating']}")
            else:
                context.user_data['filter_rating'] = None
                logger.info("Rating skipped")
            
            main_countries = [
                '–°–®–ê', '–†–æ—Å—Å–∏—è', 
                '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è',
                '–ì–µ—Ä–º–∞–Ω–∏—è', '–Ø–ø–æ–Ω–∏—è',
                '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', '–ö–∏—Ç–∞–π',
                '–ò—Ç–∞–ª–∏—è', '–ò—Å–ø–∞–Ω–∏—è',
                '–ö–∞–Ω–∞–¥–∞', '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
                '–ò–Ω–¥–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è'
            ]
            
            country_buttons = []
            for i in range(0, len(main_countries), 2):
                row = []
                row.append(InlineKeyboardButton(main_countries[i], callback_data=f"country_{main_countries[i]}"))
                
                if i + 1 < len(main_countries):
                    row.append(InlineKeyboardButton(main_countries[i+1], callback_data=f"country_{main_countries[i+1]}"))
                
                country_buttons.append(row)
            
            # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", –∑–∞—Ç–µ–º —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ] + country_buttons + [
                [InlineKeyboardButton("–õ—é–±–∞—è", callback_data="skip_country")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_rating")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=reply_markup)
            return CHOOSE_COUNTRY
        
        logger.warning(f"Unhandled rating selection: {query.data}")
        return CHOOSE_RATING
    
    except Exception as e:
        logger.error(f"Error in choose_rating: {e}")
        return CHOOSE_RATING

async def choose_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose country called with data: {query.data}")
    
    try:
        if query.data == "back_to_rating":
            logger.info("Returning to rating selection from country")
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [
                    InlineKeyboardButton("–ë–æ–ª–µ–µ 8", callback_data="rating_high"),
                    InlineKeyboardButton("–û—Ç 5 –¥–æ 8", callback_data="rating_medium"),
                    InlineKeyboardButton("–ú–µ–Ω—å—à–µ 5", callback_data="rating_low")
                ],
                [InlineKeyboardButton("–õ—é–±–æ–π", callback_data="skip_rating")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_year")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup)
            return CHOOSE_RATING
        
        if query.data == "back_to_country":
            main_countries = [
                '–°–®–ê', '–†–æ—Å—Å–∏—è', 
                '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è',
                '–ì–µ—Ä–º–∞–Ω–∏—è', '–Ø–ø–æ–Ω–∏—è',
                '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', '–ö–∏—Ç–∞–π',
                '–ò—Ç–∞–ª–∏—è', '–ò—Å–ø–∞–Ω–∏—è',
                '–ö–∞–Ω–∞–¥–∞', '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
                '–ò–Ω–¥–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è',
                '–ú–µ–∫—Å–∏–∫–∞'
            ]
            
            country_buttons = []
            for i in range(0, len(main_countries), 2):
                row = []
                row.append(InlineKeyboardButton(main_countries[i], callback_data=f"country_{main_countries[i]}"))
                if i + 1 < len(main_countries):
                    row.append(InlineKeyboardButton(main_countries[i+1], callback_data=f"country_{main_countries[i+1]}"))
                country_buttons.append(row)

            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ] + country_buttons + [
                [InlineKeyboardButton("–õ—é–±–∞—è", callback_data="skip_country")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_rating")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=reply_markup)
            return CHOOSE_COUNTRY
        
        if query.data.startswith("country_") or query.data == "skip_country":
            if query.data.startswith("country_"):
                context.user_data['filter_country'] = query.data.split('_')[1]
                logger.info(f"Selected country: {context.user_data['filter_country']}")
            else:
                context.user_data['filter_country'] = None
                logger.info("Country skipped")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")],
                [InlineKeyboardButton("–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ ‚≠ê", callback_data="sort_popularity")],
                [InlineKeyboardButton("–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É üìä", callback_data="sort_rating")],
                [InlineKeyboardButton("–ü–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–∞ üìÖ", callback_data="sort_date")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_country")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=reply_markup)
            return CHOOSE_SORT
        
        logger.warning(f"Unhandled country selection: {query.data}")
        return CHOOSE_COUNTRY
    
    except Exception as e:
        logger.error(f"Error in choose_country: {e}")
        return CHOOSE_COUNTRY
    
async def choose_sort(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Choose sort called with data: {query.data}")
    
    try:
        if query.data == "back_to_country":
            main_countries = [
                '–°–®–ê', '–†–æ—Å—Å–∏—è', 
                '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è',
                '–ì–µ—Ä–º–∞–Ω–∏—è', '–Ø–ø–æ–Ω–∏—è',
                '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', '–ö–∏—Ç–∞–π',
                '–ò—Ç–∞–ª–∏—è', '–ò—Å–ø–∞–Ω–∏—è',
                '–ö–∞–Ω–∞–¥–∞', '–ê–≤—Å—Ç—Ä–∞–ª–∏—è',
                '–ò–Ω–¥–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è'
            ]
            
            country_buttons = []
            for i in range(0, len(main_countries), 2):
                row = []
                row.append(InlineKeyboardButton(main_countries[i], callback_data=f"country_{main_countries[i]}"))
                if i + 1 < len(main_countries):
                    row.append(InlineKeyboardButton(main_countries[i+1], callback_data=f"country_{main_countries[i+1]}"))
                country_buttons.append(row)
            
            keyboard = [
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ] + country_buttons + [
                [InlineKeyboardButton("–õ—é–±–∞—è", callback_data="skip_country")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_rating")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=reply_markup)
            return CHOOSE_COUNTRY
        
        if query.data.startswith("sort_"):
            sort_type = query.data.split('_')[1]
            sort_params = {
                'popularity': 'popularity.desc',
                'rating': 'vote_average.desc',
                'date': 'primary_release_date.desc'
            }
            context.user_data['sort_by'] = sort_params.get(sort_type)
            logger.info(f"Selected sort type: {sort_type} -> {context.user_data['sort_by']}")
            
            await perform_filtered_search(update, context)
            return ConversationHandler.END
        
        logger.warning(f"Unhandled sort selection: {query.data}")
        return CHOOSE_SORT
    
    except Exception as e:
        logger.error(f"Error in choose_sort: {e}")
        return CHOOSE_SORT

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –æ–±–Ω–æ–≤–∏—Ç–µ ConversationHandler:
def main() -> None:
    logger.info("Bot started")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$"))
    
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–≤–Ω–æ
    application.add_handler(CallbackQueryHandler(handle_main_menu_selection, pattern="^search_by_filter$"))
    
    # ConversationHandler –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("filter", filter_command),
            CallbackQueryHandler(choose_type, pattern="^search_by_filter$"),
            CallbackQueryHandler(choose_type, pattern="^type_")
        ],
        states={
            CHOOSE_TYPE: [
                CallbackQueryHandler(choose_type, pattern="^type_"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$"),
                CallbackQueryHandler(handle_main_menu_selection, pattern="^back_to_type$")
            ],
            CHOOSE_GENRE: [
                CallbackQueryHandler(choose_genre, pattern="^genre_"),
                CallbackQueryHandler(choose_genre, pattern="^skip_genre$"),
                CallbackQueryHandler(choose_type, pattern="^back_to_type$"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
            ],
            CHOOSE_YEAR: [
                CallbackQueryHandler(choose_year, pattern="^year_"),
                CallbackQueryHandler(choose_year, pattern="^skip_year$"),
                CallbackQueryHandler(choose_genre, pattern="^back_to_genre$"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
            ],
            CHOOSE_RATING: [
                CallbackQueryHandler(choose_rating, pattern="^rating_"),
                CallbackQueryHandler(choose_rating, pattern="^skip_rating$"),
                CallbackQueryHandler(choose_year, pattern="^back_to_year$"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
            ],
            CHOOSE_COUNTRY: [
                CallbackQueryHandler(choose_country, pattern="^country_"),
                CallbackQueryHandler(choose_country, pattern="^skip_country$"),
                CallbackQueryHandler(choose_rating, pattern="^back_to_rating$"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
            ],
            CHOOSE_SORT: [
                CallbackQueryHandler(choose_sort, pattern="^sort_"),
                CallbackQueryHandler(choose_country, pattern="^back_to_country$"),
                CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
            ]
        },
        fallbacks=[
            CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main_menu$")
        ],
        allow_reentry=True
    )
    
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_search))
    application.add_handler(CallbackQueryHandler(show_movie_details, pattern="^details_"))
    application.add_handler(CallbackQueryHandler(expand_description, pattern="^expand_"))
    application.add_handler(CallbackQueryHandler(collapse_description, pattern="^collapse_"))
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern="^page_|^back_to_list"))
    application.add_handler(CallbackQueryHandler(handle_main_menu_selection, pattern="^search_by_title$"))

    application.run_polling()

if __name__ == "__main__":
    main()
